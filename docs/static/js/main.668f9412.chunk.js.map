{"version":3,"sources":["actions.ts","components/Loader.tsx","components/AssetDist.tsx","components/DetCard.tsx","components/Scrip.tsx","components/Qty.tsx","components/MktVal.tsx","components/UnRealisedPL.tsx","components/AssetItem.tsx","components/AssetList.tsx","components/ViewData.tsx","components/Error.tsx","pages/index.jsx","App.jsx","slice.js","data.ts","sagas.ts","store.ts","index.tsx"],"names":["loading","createAction","setData","getData","setErr","Loader","AssetDist","mf","etf","size","title","extra","style","fontSize","fontWeight","flex","bodyStyle","display","flexWrap","flexDirection","justifyContent","minHeight","hoverable","type","percent","trailColor","strokeWidth","strokeLinecap","showInfo","width","alignItems","background","height","marginRight","DetCard","children","padding","margin","borderRadius","minWidth","Scrip","name","price","maxWidth","overflow","cursor","className","color","toLocaleString","Qty","quantity","averageCost","investedAmount","MktVal","value","portfolioShare","Number","status","isNeg","val","positive","Arrow","up","UnRealisedPL","returnShare","rShareNumber","retShare","isNaN","profit","undefined","Boolean","AssetItem","asset","scripName","qty","Quantity","Price","invAmt","avgCost","marketValue","portVal","unPL","perRet","marginBottom","AssetList","assets","dataSource","renderItem","item","ViewData","data","id","filter","length","Message","error","onReload","onClick","Error","props","message","showIcon","ActiveHome","connect","store","app","dispatch","handleReload","App","useEffect","Header","Content","Footer","href","dataSlice","createSlice","initialState","extraReducers","builder","addCase","action","payload","addDefaultCase","state","put","delay","mockData","setDataAction","watchForSetData","takeLatest","rootReducer","combineReducers","reducer","sagaMw","createSagaMiddleWare","configureStore","middleware","defaultMw","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.668f9412.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\nimport { DataRecord } from \"./data\";\n\nexport const loading = createAction<boolean>(\"app/loading\");\n\nexport const setData = createAction<DataRecord>(\"app/data/set\");\n\nexport const getData = createAction(\"app/data/get\");\n\nexport const setErr = createAction<string>(\"app/error\");\n","import React from \"react\";\nimport { Spin } from \"antd\";\n\nexport const Loader = () => <Spin />;\n","import React from \"react\";\nimport { Progress, Card } from \"antd\";\n\ninterface Props {\n  mf: number;\n  etf: number;\n}\nexport const AssetDist: React.FC<Props> = ({ mf, etf }) => (\n  <Card\n    size=\"small\"\n    title=\"Portfolio\"\n    extra={\n      <span style={{ fontSize: \"12px\", fontWeight: \"bold\" }}>Asset Wise</span>\n    }\n    style={{\n      flex: 1,\n    }}\n    bodyStyle={{\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flexDirection: \"column\",\n      justifyContent: \"space-evenly\",\n      minHeight: \"400px\",\n    }}\n    hoverable\n  >\n    <Progress\n      type=\"circle\"\n      percent={(mf / (mf + etf)) * 100}\n      trailColor=\"rgb(174, 156, 70)\"\n      strokeWidth={15}\n      strokeLinecap=\"square\"\n      showInfo={false}\n      width={160}\n    />\n    <div\n      title=\"Labels\"\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            background: \"#1890ff\",\n            width: \"15px\",\n            height: \"10px\",\n            marginRight: \"10px\",\n          }}\n        ></div>\n        <div>Mutual Funds</div>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            background: \"rgb(174 156 70)\",\n            width: \"15px\",\n            height: \"10px\",\n            marginRight: \"10px\",\n          }}\n        ></div>\n        <div>ETFs</div>\n      </div>\n    </div>\n  </Card>\n);\n","import React from \"react\";\nimport { Col, Card } from \"antd\";\n\nexport const DetCard: React.FC<{\n  children: React.ReactChildren | React.ReactElement;\n}> = ({ children }) => (\n  <Col>\n    <Card\n      style={{\n        padding: \"5px 5px\",\n        margin: \"5px 5px\",\n        background: \"#f2f2f2\",\n        borderRadius: \"6px\",\n        minWidth: \"220px\",\n      }}\n      bodyStyle={{\n        padding: \"3px 3px\",\n      }}\n    >\n      {children}\n    </Card>\n  </Col>\n);\n","import React from \"react\";\nimport { EmptyNumber } from \"../data\";\nimport { DetCard } from \"./DetCard\";\n\nexport const Scrip: React.FC<{ name: string; price: EmptyNumber }> = ({\n  name,\n  price,\n}) => (\n  <DetCard>\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        minWidth: \"150px\",\n        maxWidth: \"200px\",\n        overflow: \"auto\",\n      }}\n    >\n      <div\n        style={{ fontWeight: \"bold\", marginRight: \"5px\", cursor: \"pointer\" }}\n      >\n        ☰\n      </div>\n      <div style={{ marginRight: \"5px\" }}>\n        <div\n          className=\"subtle\"\n          style={{ fontWeight: \"bold\", fontSize: \"12px\" }}\n        >\n          {name}\n        </div>\n        <div style={{ color: \"#00b7ff\", fontWeight: \"bold\", fontSize: \"16px\" }}>\n          ${price.toLocaleString()}\n        </div>\n      </div>\n      <div style={{ marginRight: \"5px\" }}>\n        <div\n          style={{ color: \"#a8bd84\", fontWeight: \"bolder\", fontSize: \"12px\" }}\n        >\n          iShares\n        </div>\n        <div style={{ fontSize: \"8px\" }}>by BlackDoc</div>\n        <div style={{ fontWeight: \"bolder\", fontSize: \"12px\" }}>\n          S&P 500 Index\n        </div>\n        <div style={{ fontSize: \"10px\" }}>US Equity</div>\n      </div>\n    </div>\n  </DetCard>\n);\n","import React from \"react\";\nimport { EmptyNumber } from \"../data\";\nimport { DetCard } from \"./DetCard\";\n\nexport const Qty: React.FC<{\n  quantity: EmptyNumber;\n  averageCost: EmptyNumber;\n  investedAmount: EmptyNumber;\n}> = ({ quantity, averageCost, investedAmount }) => (\n  <DetCard>\n    <>\n      <div className=\"det-row\">\n        <span>Quantity</span>\n        <span className=\"number\">{quantity}</span>\n      </div>\n      <div className=\"det-row\">\n        <span>Avg. Cost </span>\n        <span className=\"number\">{averageCost.toLocaleString()}</span>\n      </div>\n      <div className=\"det-row\">\n        <span>Invested Amt.</span>\n        <span className=\"number\">${investedAmount.toLocaleString()}</span>\n      </div>\n    </>\n  </DetCard>\n);\n","import React from \"react\";\nimport { Progress } from \"antd\";\nimport { EmptyNumber } from \"../data\";\nimport { DetCard } from \"./DetCard\";\n\nexport const MktVal: React.FC<{\n  value: EmptyNumber;\n  portfolioShare: EmptyNumber;\n}> = ({ value, portfolioShare }) => (\n  <DetCard>\n    <>\n      <div className=\"det-row\">\n        <span className=\"number\">Market Value</span>\n        <span className=\"number\">${value.toLocaleString()}</span>\n      </div>\n      <div className=\"det-row\">\n        <span className=\"subtle\">% of portfolio value</span>\n        <span className=\"number\">{portfolioShare}%</span>\n      </div>\n      <div>\n        <Progress\n          percent={Number(portfolioShare)}\n          showInfo={false}\n          status=\"success\"\n          trailColor=\"rgb(204 204 204)\"\n        />\n      </div>\n    </>\n  </DetCard>\n);\n","import React from \"react\";\nimport { Progress } from \"antd\";\nimport { DetCard } from \"./DetCard\";\nimport { EmptyNumber } from \"../data\";\n\nconst isNeg = (val: number): boolean => val < 0;\nconst positive = (val: number): number => (isNeg(val) ? -val : val);\n\nconst Arrow: React.FC<{ up: boolean }> = ({ up = true }) =>\n  up ? (\n    <span style={{ color: \"#52c41a\" }}>▲</span>\n  ) : (\n    <span style={{ color: \"#ed494c\" }}>▼</span>\n  );\n\nexport const UnRealisedPL: React.FC<{\n  value: EmptyNumber;\n  returnShare: EmptyNumber;\n}> = ({ value, returnShare }) => {\n  const rShareNumber = Number(returnShare);\n\n  const retShare = isNaN(rShareNumber) ? \"-\" : positive(rShareNumber);\n\n  const profit = isNaN(rShareNumber)\n    ? undefined\n    : isNeg(rShareNumber)\n    ? false\n    : true;\n\n  return (\n    <DetCard>\n      <>\n        <div className=\"det-row\">\n          <span className=\"number\">Unrealised P/L</span>\n          <span className=\"number\">\n            {Number(value) ? positive(Number(value)) : \"-\"}\n          </span>\n        </div>\n        <div className=\"det-row\">\n          <span className=\"subtle\">% Return</span>\n          <span className=\"number\">\n            {retShare !== \"-\" && retShare !== 0 && (\n              <>\n                <Arrow up={Boolean(profit)} />\n                &nbsp;\n              </>\n            )}\n            {retShare}%\n          </span>\n        </div>\n        <div className=\"double-progress\">\n          <Progress\n            percent={isNaN(rShareNumber) || profit ? 0 : positive(rShareNumber)}\n            showInfo={false}\n            status=\"exception\"\n            trailColor=\"rgb(204 204 204)\"\n          />\n          <Progress\n            percent={isNaN(rShareNumber) || !profit ? 0 : rShareNumber}\n            showInfo={false}\n            status=\"success\"\n            trailColor=\"rgb(204 204 204)\"\n          />\n        </div>\n      </>\n    </DetCard>\n  );\n};\n","import React from \"react\";\nimport { Row, Col, Card, Button } from \"antd\";\nimport { DataRecord } from \"../data\";\nimport { Scrip } from \"./Scrip\";\nimport { Qty } from \"./Qty\";\nimport { MktVal } from \"./MktVal\";\nimport { UnRealisedPL } from \"./UnRealisedPL\";\n\nexport const AssetItem: React.FC<{ asset: DataRecord }> = ({ asset }) => {\n  const scripName = asset.Scrip;\n  const qty = asset.Quantity;\n  const price = asset.Price;\n  const invAmt = asset[\"Invested Amount\"];\n  const avgCost = asset[\"Avg. Cost\"];\n  const marketValue =\n    !isNaN(Number(price)) && !isNaN(Number(price))\n      ? Number(price) * Number(qty)\n      : \"-\";\n  const portVal = asset[\"% of Portfolio Value\"];\n  const unPL = asset[\"Unrealized P&L\"];\n  const perRet = asset[\"% Return\"];\n\n  return (\n    <Card\n      bodyStyle={{\n        padding: \"5px 5px\",\n        margin: \"0px\",\n        display: \"flex\",\n      }}\n      style={{\n        borderRadius: \"6px\",\n        margin: \"5px 5px\",\n      }}\n    >\n      <Row>\n        <Scrip name={scripName} price={price} />\n        <Qty quantity={qty} averageCost={avgCost} investedAmount={invAmt} />\n        <MktVal value={marketValue} portfolioShare={portVal} />\n        <UnRealisedPL value={unPL} returnShare={perRet} />\n        <Col className=\"bs-col\">\n          <Button\n            style={{\n              marginBottom: \"5px\",\n            }}\n            className=\"bs-btn\"\n            size=\"small\"\n          >\n            BUY\n          </Button>\n          <Button className=\"bs-btn\" size=\"small\">\n            SELL\n          </Button>\n        </Col>\n      </Row>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { AssetItem } from \"./AssetItem\";\nimport { Data } from \"../data\";\nimport { List } from \"antd\";\n\nexport const AssetList: React.FC<{ assets: Data }> = ({ assets = [] }) => (\n  <List\n    className=\"asset-list\"\n    dataSource={assets}\n    renderItem={(item) => <AssetItem asset={item} />}\n  />\n);\n","import React from \"react\";\nimport { AssetDist } from \"./AssetDist\";\nimport { AssetList } from \"./AssetList\";\nimport { Data } from \"../data\";\n\nexport const ViewData: React.FC<{ data: Data }> = ({ data }) => (\n  <div id=\"view-data\">\n    <AssetList assets={data} />\n    <AssetDist\n      etf={data.filter(({ mf }) => mf).length}\n      mf={data.filter(({ mf }) => !mf).length}\n    />\n  </div>\n);\n","import React from \"react\";\nimport { Alert, Button } from \"antd\";\n\ninterface Props {\n  error: string;\n  onReload: any;\n}\n\nconst Message: React.FC<Props> = ({ error, onReload }) => (\n  <div id=\"message-error\">\n    <div>{error}</div>\n    <Button onClick={onReload} type=\"ghost\">\n      Retry loading\n    </Button>\n  </div>\n);\n\nexport const Error: React.FC<Props> = (props) => (\n  <Alert type=\"error\" message={<Message {...props} />} showIcon />\n);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Loader } from \"../components/Loader\";\nimport { ViewData } from \"../components/ViewData\";\nimport { Error as ErrorHandler } from \"../components/Error\";\nimport { getData } from \"../actions\";\n\n// interface AppState {\n//   loading: boolean;\n//   error: string;\n//   data: DataRecord | [];\n// }\n\nconst Home = ({ loading, error, data, handleReload }) => {\n  if (error) {\n    return <ErrorHandler error={error} onReload={handleReload} />;\n  } else if (loading) {\n    return <Loader />;\n  }\n  return <ViewData data={data} />;\n};\n\nconst mapStateToProps = (store) => ({ ...store.app });\nconst mapDispatchToProps = (dispatch) => ({\n  handleReload: () => dispatch(getData()),\n});\n\nexport const ActiveHome = connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { useEffect } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Layout } from \"antd\";\nimport { getData } from \"./actions\";\nimport { ActiveHome as Home } from \"./pages/index.jsx\";\nimport \"./App.css\";\n\nexport const App = ({ store }) => {\n  useEffect(() => {\n    store && store.dispatch(getData());\n  }, [store]);\n\n  return (\n    <Provider store={store}>\n      <Layout className=\"App\">\n        <Layout.Header>\n          <div id=\"heading\">Asset-manager for mutual funds and ETFs</div>\n        </Layout.Header>\n        <Layout.Content>\n          <Home />\n        </Layout.Content>\n        <Layout.Footer>\n          <div id=\"footer\">\n            Made with Love by <a href=\"mailto: harry2office@gmail.com\">H S</a>\n          </div>\n        </Layout.Footer>\n      </Layout>\n    </Provider>\n  );\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { loading, setData } from \"./actions\";\n\nexport const dataSlice = createSlice({\n  name: \"global-app\",\n  initialState: { loading: false, data: [], error: \"\" },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loading, (store, action) => {\n        store.loading = action.payload;\n        return store;\n      })\n      .addCase(setData, (store, action) => {\n        store.data = action.payload;\n        return store;\n      })\n      .addDefaultCase((state) => state);\n  },\n});\n","export type EmptyNumber = Number | \"-\";\n\nexport interface DataRecord {\n  Scrip: string;\n  Quantity: EmptyNumber;\n  Price: EmptyNumber;\n  \"Avg. Cost\": EmptyNumber;\n  \"Invested Amount\": EmptyNumber;\n  \"% of Portfolio Value\": EmptyNumber;\n  \"Unrealized P&L\": EmptyNumber;\n  \"% Return\": EmptyNumber;\n  mf: Boolean;\n}\n\nexport type Data = Array<DataRecord> | [];\n\nexport const data: Data = [\n  {\n    Scrip: \"AADR\",\n    Quantity: 430,\n    Price: 50.3,\n    \"Avg. Cost\": 41.75,\n    \"Invested Amount\": 17952.07,\n    \"% of Portfolio Value\": 22.06,\n    \"Unrealized P&L\": 3676.93,\n    \"% Return\": 20.48,\n    mf: true,\n  },\n  {\n    Scrip: \"MFEM\",\n    Quantity: 210,\n    Price: 23.2,\n    \"Avg. Cost\": 22.5,\n    \"Invested Amount\": 4725.84,\n    \"% of Portfolio Value\": 5.81,\n    \"Unrealized P&L\": 146.16,\n    \"% Return\": 3.09,\n    mf: true,\n  },\n  {\n    Scrip: \"JPEM\",\n    Quantity: 328,\n    Price: 52.5,\n    \"Avg. Cost\": 56.7,\n    \"Invested Amount\": 18597.6,\n    \"% of Portfolio Value\": 22.86,\n    \"Unrealized P&L\": -1377.6,\n    \"% Return\": -7.41,\n    mf: true,\n  },\n  {\n    Scrip: \"KEMQ\",\n    Quantity: 801,\n    Price: 20.4,\n    \"Avg. Cost\": 22.24,\n    \"Invested Amount\": 17811.04,\n    \"% of Portfolio Value\": 21.89,\n    \"Unrealized P&L\": 3441.34,\n    \"% Return\": 25.0,\n    mf: true,\n  },\n  {\n    Scrip: \"KLDW\",\n    Quantity: 523,\n    Price: 32.9,\n    \"Avg. Cost\": 26.32,\n    \"Invested Amount\": 13765.36,\n    \"% of Portfolio Value\": 16.92,\n    \"Unrealized P&L\": 3441.34,\n    \"% Return\": 25.0,\n    mf: false,\n  },\n  {\n    Scrip: \"KOIN\",\n    Quantity: 335,\n    Price: 25.4,\n    \"Avg. Cost\": 25.4,\n    \"Invested Amount\": 8509.0,\n    \"% of Portfolio Value\": 10.46,\n    \"Unrealized P&L\": \"-\",\n    \"% Return\": 0.0,\n    mf: false,\n  },\n];\n","import { takeLatest, put, delay } from \"redux-saga/effects\";\nimport { loading, setData as setDataAction, getData, setErr } from \"./actions\";\nimport { data as mockData } from \"./data\";\n\nconst setData = function* () {\n  try {\n    yield put(loading(true));\n    const data = yield delay(1000, mockData);\n    yield put(setDataAction(data));\n    yield put(loading(false));\n  } catch (err) {\n    yield put(setErr(err.message));\n  }\n};\n\nexport const watchForSetData = function* () {\n  yield takeLatest(getData.type, setData);\n};\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleWare from \"redux-saga\";\nimport { dataSlice } from \"./slice\";\nimport { watchForSetData } from \"./sagas\";\n\nconst rootReducer = combineReducers({\n  app: dataSlice.reducer,\n});\n\nconst sagaMw = createSagaMiddleWare();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (defaultMw) => [...defaultMw(), sagaMw],\n});\n\nsagaMw.run(watchForSetData);\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport { store };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App.jsx\";\nimport { store } from \"./store\";\n\nReactDOM.render(<App store={store} />, document.getElementById(\"root\"));\n"],"sourceRoot":""}